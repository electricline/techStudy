## 프로세스와 스레드의 차이
-> 프로세스는 실행중인 프로그램을 의미합니다. 스레드는 실행 제어만 분리한 것을 의미합니다.
   
   추가적인 답변.
   프로세스는 운영체제로부터 자원을 할당받지만, 스레드는 프로세스로부터 자원을 할당받고, 프로세스의 코드/데이터/힙영역을 공유하기 때문에 좀 더 효율적으로 통신할 수 있습니다.
   또한 컨텍스트 스위칭도 캐시 메모리를 비우지를 않아도 되는 스레드쪽이 빠릅니다. 그리고, 스레드는 자원공유로 문자가 발생할 수 있으니 이를 염두에 둔 프로그래밍을 해야합니다.

## 컨텍스트 스위칭에 대해 설명해보세요.
-> 컨텍스트 스위칭은 한 Task가 끝날 때까지 기다리는 것이 아니라 여러 작업을 번갈아가며 실행해서 동시에 처리될 수 있도록 하는 방법입니다.
   인터럽트가 발생하면 현재 프로세스의 상태를 PCB에 저장하고 새로운 프로세스의 상태를 레지스터에 저장하는 방식으로 동작합니다. 
   이 때, CPU는 아무런 일을 하지 않으므로 잦은 컨텍스트 스위칭은 성능저하를 일으킬 수 있습니다.
   스레드와 프로세스의 동작방식이 약간 상이한데, 스레드는 캐시메모리나 PCB에 저장해야하는 내용이 적고, 비워야 하는 내용도 적기때문에 상대적으로 더 빠른 컨텍스트 스위칭이 일어날 수 있습니다.

## 동기와 비동기의 차이(블로킹, 넌블로킹) / 장단점에 대해 설명해보세요.
-> 동기/비동기는 두 개 이상의 무엇인가가 시간을 맞춘다/안맞춘다로 구분할 수 있습니다.
   동기 방식은 메서드 리턴과 결과를 전달받는 시간이 일치하는 명령 실행 방식입니다. 또, 동기 방식은 한 함수가 끝나는 시간과 바로 다음의 함수가 시작하는 시간이 같습니다.
   비동기 방식은 여러 개의 처리가 함께 실행되는 방식으로, 동기 방식에 비해 단위시간 당 많은 작업을 처리할 수 있습니다. 
   단, CPU나 메모리를 많이 사용하는 작업을 비동기로 처리하게 되면 과부하가 걸릴 수 있습니다. 프로그램의 복잡도도 증가하게 됩니다.

   블로킹/논블로킹은 동기/비동기와는 다른 관점으로, 내가 직접 제어할 수 없는 대상(IO/멀티스레드)을 상대하는 방법에 대한 분류입니다.
   블로킹 방식은 대상의 작업이 끝날 때 까지 제어권을 대상이 가지고 있는 것을 의미합니다. 반면에 논블로킹은 대상의 작업 완료여부와 상관없이 새로운 작업을 수행합니다.

   동기 논블로킹은 계속해서 polling을 수행하기 때문에 컨텍스트 스위칭이 지속적으로 발생해 지연이 발생합니다.

## 멀티스레드
	설명 : 하나의 프로세스에서 여러개의 스레드를 만들어 자원의 생성과 관리의 중복을 최소화하는 것
	- 장점과 단점
	- 장점
		- 멀티 프로세스에 비해 메모리 자원소모가 줄어듭니다.
		- 힙 영역을 통해서 스레드간 통신이 가능해서 프로세스간 통신보다 간단합니다.
		- 스레드의 컨텍스트 스위칭은 프로세스의 컨텍스트 스위칭보다 빠릅니다.
	- 단점
		- 힙 영역에 있는 자원을 사용할 때는 동기화를 해야합니다.
		- 동기화를 위해서 락을 과도하게 사용하면 성능이 저하될 수 있습니다.
		- 하나의 스레드가 비정상적으로 동작하면 다른 스레드도 종료될 수 있습니다.
	- 멀티스레드 vs 멀티프로세스
		(1) 멀티 프로세스
		(+) 하나의 프로세스가 비정상적으로 종료되더라도 다른 프로세스가 영향을 받지 않음
		(+) 멀티 스레드처럼 동기화 작업이 별도로 필요하지 않음
		(-) 자원 소모, 메모리 낭비, 문맥 교환으로 인한 비효율성
		(-) IPC 통신으로 인한 비용

		(2) 멀티 스레드
		(+) 문맥 교환에 소비되는 시간을 줄일 수 있음(스택 영역만 문맥교환이 일어남)
		(+) 자원을 공유하기 때문에 메모리 낭비를 줄임
		(-) 동기화 작업이 필요
		(-) 하나의 스레드가 비정상적으로 종료 시, 다른 스레드도 종료될 수 있음

## Thread-safe 하다는 의미와 설계하는 법을 설명해보세요.
	- 싱글턴패턴을 사용합니다.
	- 동기화 블럭에서 연산을 수행합니다.
	- 인스턴스 변수를 두지 않습니다.
		
## 스케줄러
	- 장기 스케줄러
	- 단기 스케줄러
	- 중기 스케줄러

## CPU 스케줄러
	- FCFS
	- SJF
	- SRTF
	- Priority scheduling
	- RR
## 동기와 비동기의 차이

## 프로세스 동기화
	-- Critical Section
	-- 해결책
		- Lock
		- Semaphores
		- 모니터
