## 운영체제란?
-> 운영 체제는 컴퓨터 하드웨어가 컴퓨터 소프트웨어와 통신하고 작동하도록 하는 소프트웨어 프로그램이다.

## 운영 체제의 주요 목적은 무엇입니까?
-> 컴퓨터 시스템 내의 자원을 효율적으로 관리하는 것, 컴퓨터 시스템을 편리하게 사용할 수 있는 환경을 제공하는 것이 목적이다.

## 프로세스란?
- 컴퓨터에서 실행되고 있는 프로그램을 프로세스라고 한다. 
- 두 가지 유형의 프로세스가 있다. 운영 체제 프로세스, 사용자 프로세스

## 프로세스의 특징을 설명하세요.
- 프로세스는 각각 독립된 메모리 영역(Code, Data, Stack, heap)을 할당받는다.
- 기본적으로 프로세스당 최소 1개의 스레드(메인 스레드)를 가지고 있다.
- 각 프로세스는 별도의 주소 공간에서 실행되며, 한 프로세스는 다른 프로세스의 변수나 자료구조에 접근할 수 없다.
- 한 프로세스가 다른 프로세스의 자원에 접근하려면 프로세스 간의 통신(IPC, inter-process communication)을 사용해야 한다..
  (Ex. 파이프, 파일, 스켓 등을 이용한 통신 방법 이용)

## 스레드는 무엇입니까?
- 스레드는 CPU 사용의 기본 단위이다. 프로세스 내에서 실행되는 여러 흐름의 단위를 말한다. 스레드는 스레드 ID, 프로그램 카운터,
  레지스터 세트 및 스택으로 구성된다.

## 스레드의 특징을 설명하세요
- 스레드는 프로세스 내에서 각각 Stack만 따로 할당받고 Code, Data, Heap 영역은 공유한다.
- 프로세스 내의 주소 공간이나 자원들(힙 공간 등)을 같은 프로세스 내에 스레드끼리 공유하면서 실행된다.
- 같은 프로세스 안에 있는 여러 스레드들은 같은 힙 공간을 공유한다. 반면에 프로세스는 다른 프로세스의 메모리에 직접 접근할 수 없다.
- 각각의 스레드는 별도의 레지스터와 스택을 갖고 있지만, 힙 메모리는 서로 읽고 쓸 수 있다.
- 한 스레드가 프로세스 자원을 변경하면, 다른 이웃 스레드(sibling thread)도 그 변경 결과를 즉시 볼 수 있다.
- 멀티 스레드 환경에서 멀티 프로세스보다 context - switching 비용이 낮다. 그러나 같은 자원을 공유하므로 공유자원에 대한 동기화를 필수적으로 신경써야한다.

## Thread-safe 하다는 의미와 설계하는 법을 설명해보세요.
- 싱글턴패턴을 사용합니다.
- 동기화 블럭에서 연산을 수행합니다.
- 인스턴스 변수를 두지 않습니다.

## 프로세스와 스레드의 차이점
- 프로세스는 운영체제로부터 자원을 할당받는 작업의 단위이고, 
- 스레드는 프로세스가 할당받은 자원을 이용하는 실행의 단위 입니다.

## 스레드의 장점과 단점에 대해 설명해 주세요
- 스레드는 프로세스보다 생성 및 종료시간, 스레드간 전환시간이 짧다.
- 스레드는 프로세스의 메모리, 자원등을 공유하므로 커널의 도움없이 상호간의 통신이 가능하다.
- 콘텍스트 스위칭의 비용이 낮다. 
- 하나의 쓰레드가 blocked 되어도 다른 쓰레드가 작동 가능합니다.
스레드의 단점 -> 공유 자원에 대한 동기화, 데드락을 신경써야한다.

## 멀티 스레드 vs 멀티 프로세스 (멀티 프로세스 대신 멀티 스레드를 사용하는 이유는 무엇입니까?)
- 프로그램을 여러개 실행하는 것보다 하나의 프로그램 안에서 여러 작업을 해결하는 것입니다.
- 자원의 효율성이 증대합니다.
- 처리 비용 감소 및 응답 시간 단축 시킬 수 있습니다.

## 멀티 프로세싱과 멀티프로그래밍의 차이는?
- 멀티 프로세싱은 여러개의 처리장치(CPU)를 장착하여 동시에 여러 작업을 병렬로 실행하는 방법입니다.
- 멀티 프로그래밍은 다수개의 프로그램의 같이 주기억장치에 있도록 한 방식입니다.

## 소켓이란 무엇입니까?
- 두 응용 프로그램을 연결하는 데 사용됩니다. 연결의 끝점을 소켓이라고 합니다.

## 커널이란 무엇입니까?
- OS의 모든 부분에 대한 기본 서비스를 제공하는 컴퓨터 운영 체제의 핵심이자 가장 중요한 부분입니다.

## 힙 영역과 스택 영역의 차이점을 설명하시오. (추가적인 조사가 필요)
- 스택 : 지역변수와 매개 변수가 저장되어 있으며, 함수의 호출과 함께 할당되는 영역입니다.
- 힙 : 사용자에 의해 동적으로 할당되고 해제될 수 있는 메모리 영역입니다.

## 운영 체제에서 페이징을 사용하는 것은 무엇입니까?
- 필요한 데이터를 최대한 빨리 사용할 수 있습니다.

## 멀티 프로세서 시스템의 장점은 무엇입니까?
- 리소스를 공유 할 수 있기 때문에 비용이 효과적이며, 안정성이 향상 됩니다.

## 가상 메모리(Virtual Memory)란 무엇입니까?
- 프로세스가 메모리 외부에서 실행될 수 있도록 하는 매우 유용한 메모리 관리 기술 입니다.
  주로 실제 메모리에 맞지 않을 때 사용됩니다.

## 교착 상태(DeadLock)이란?
- 두 개 이상의 프로세스나 스레드가 서로 자원을 기다리면서 무한히 기다리게 되는 상태를 말합니다.
  즉 프로세스, 스레드 둘다 이와 같은 상태가 일어날 수 있다.
 
## 교착상태(데드락)의 발생 4가지 조건
- 상호 배제: 한 번에 한 프로세스만 해당 자원을 사용할 수 있어야 합니다.
- 점유 대기: 할당된 자원을 가진 상태에서 다른 자원을 기다립니다.
- 비선점: 다른 프로세스가 자원의 사용을 끝낼 때 까지 자원을 뺏을 수 없습니다.
- 순환대기: 각 프로세스가 순환적으로 다음 프로세스가 요구하는 자원을 가지고 있습니다.

## 교착상태(데드락)와 기아상태의 해결방법에 대해 설명해보세요.
- 예방(Prevention) : 4가지 조건 중 하나라도 만족되지 않도록 합니다.
- 회피(Avoidance) :  데드락이 발생하지 않도록 합니다. Ex) Dijkstra의 Banker’s Algorithm
- 탐지(Detection) : 교착상태가 발생할 때, 해결합니다.
- 복구(Recovery) : 회복과정의 성능저하가 심하다면 그냥 무시합니다.

## Banker's algorithm 은 무엇입니까?
- 교착 상태를 피하기 위해 뱅커 알고리즘이 사용됩니다.
- 보통 은행에서 모든 고객의 요구가 충족되도록 현금을 할당하는데서 유래한 기법이다. 
- 프로세스가 자원을 요구할 때 시스템은 자원을 할당한 후에도 안정 상태로 남아있게 되는지를 사전에 검사하여 
  교착 상태를 회피하는 기법이다. 

## RAID 란 무엇입니까? RAID의 종류에 대해 말하시오.
- 전체 성능을 향상시키기 위해 동일한 데이터를 중복 저장하는 데 사용됩니다.
- RAID 0-내결함성이없는 스트립 디스크 어레이 
  RAID 1-미러링 및 이중화 
  RAID 2-메모리 스타일 오류 수정 코드 
  RAID 3-비트 인터리브 패리 
  RAID 4-블록 인터리브 패리티 
  RAID 5-블록 인터리브 분산 패리티 
  RAID 6-P + Q 이중화

## 동기(Sync)와 비동기(Async)의 차이(블로킹, 넌블로킹) / 장단점에 대해 설명해보세요.
- 동기/비동기는 두 개 이상의 무엇인가가 시간을 맞춘다/안맞춘다로 구분할 수 있습니다. 
- 동기 방식은 메서드 리턴과 결과를 전달받는 시간이 일치하는 명령 실행 방식입니다. 
- 또, 동기 방식은 한 함수가 끝나는 시간과 바로 다음의 함수가 시작하는 시간이 같습니다. 
- 비동기 방식은 여러 개의 처리가 함께 실행되는 방식으로, 동기 방식에 비해 단위시간 당 많은 작업을 처리할 수 있습니다. 
  단, CPU나 메모리를 많이 사용하는 작업을 비동기로 처리하게 되면 과부하가 걸릴 수 있습니다. 
  프로그램의 복잡도도 증가하게 됩니다.
- 블로킹/논블로킹은 동기/비동기와는 다른 관점으로, 내가 직접 제어할 수 없는 대상(IO/멀티스레드)을 상대하는 방법에 대한 분류입니다. 
  블로킹 방식은 대상의 작업이 끝날 때 까지 제어권을 대상이 가지고 있는 것을 의미합니다. 반면에 논블로킹은 대상의 작업 완료여부와 상관없이 새로운 작업을 수행합니다.
- 동기 논블로킹은 계속해서 polling을 수행하기 때문에 컨텍스트 스위칭이 지속적으로 발생해 지연이 발생합니다.

## 프로세스 제어 블록(Process Control Block, PCB)
- PCB 는 특정 프로세스에 대한 중요한 정보를 저장 하고 있는 운영체제의 자료구조이다. 
  운영체제는 프로세스를 관리하기 위해 프로세스의 생성과 동시에 고유한 PCB 를 생성 한다. 
  프로세스는 CPU 를 할당받아 작업을 처리하다가도 프로세스 전환이 발생하면 진행하던 작업을 저장하고 CPU 를 반환해야 하는데, 
  이때 작업의 진행 상황을 모두 PCB 에 저장하게 된다. 그리고 다시 CPU 를 할당받게 되면 PCB 에 저장되어있던 
  내용을 불러와 이전에 종료됐던 시점부터 다시 작업을 수행한다.

## 스풀링이란 무엇입니까?
- 장치, 프로그램 또는 시스템에서 데이터를 사용하고 실행하기 위해 일시적으로 데이터를 수집하는 프로세스 입니다.
  예를 들어 동시에 출력을 프린터로 보내면 스풀링은 이러한 모든 작업을 디스크 파일에 보관하고 프린터에 따라 대기열에 넣습니다. 

## 뮤텍스란 무엇입니까?
-  상호배제라고도 하며, Critical Section을 가진 스레드의 Running Time이 서로 겹치지 않도록 
   각각 단독으로 실행하게 하는 기술이다. 
   뮤텍스는 상태가 0, 1 두개 뿐인 이진 세마포어. synchronized 또는 lock을 통해 해결한다.

   세마포어 : 공유된 자원의 데이터를 여러 '프로세스'에서 접근하는 것을 막는다. 

##) 뮤텍스와 세마포어의 차이점은 무엇인가요?
-  동기화 대상의 갯수이다. 뮤텍스는 동기화 대상이 하나뿐이고, 세마포어는 동기화 대상이 하나 이상일 때.
   또한 세마포어는 다른 프로세스가 세마포어를 해제할 수 있지만, 
   뮤텍스는 락을 획득한 프로세스만 락을 반환할 수 있습니다.

## 운영 체제에서 기아(Starvation) 란 무엇입니까?
- 특정 프로세스의 우선순위가 낮아서 원하는 자원을 계속 할당 받지 못하는 상태입니다.

## 운영 체제에서 에이징(Aging)는 무엇입니까?
- 자원 스케줄링 시스템에서 기아를 방지하기 위해 사용되는 기술입니다. 
  특정 프로세스의 우선순위가 낮아 무한정 기다리게되는 경우, 
  한번 양보하거나 기다린 시간에 비례하여 일정 시간이 지나면 우선순위를 한 단계씩 높여 
  가까운 시간 안에 자원을 할당받도록 하는 기법을 말합니다.

## 운영 체제에서 페이징(Paging)은 무엇입니까?
- 커다란 크기의 작업을 일정한 크기로 나누어 잘개 쪼개어 처리하는것을 말합니다.
  따라서 불연속적인 메모리 요청 등에 유연하게 처리할 수 있습니다.

## 페이징의 장점과 단점은?
- 장점: 메모리를 페이지단위로 가져와서, 프로세스의 효율적인 운영이 가능하다. 
- 단점: 페이지 크기별, 단위별로 페이지 폴트 현상이 발생할 수 있다.

## 세그먼테이션(Segmentation) 이란?
- 메모리를 서로 크기가 다른 논리적인 블록 단위인 세그먼트(segment)로 분할하고 
  메모리를 할당하여 물리 주소를 논리 주소로 변환하는 것을 말한다. 
  미리 분할하는 것이 아니라 메모리를 사용할 시점에 할당된다. 내부단편화는 없지만 외부단편화가 발생할 수 있다.

## 멀티 스레드 프로그래밍의 장점은 무엇입니까?
- 스택 영역에서 일어나는 문맥교환에 소비되는 시간을 줄일 수 있습니다.
- 자원을 공유하기 때문에 메모리 낭비를 줄일 수 있습니다.

## 멀티 스레드 프로그래밍의 단점은 무엇입니까?
- 동기화 작업이 필요하다.
- 하나의 스레드가 비정상적으로 종료 시, 다른 스레드도 종료될 수 있습니다.

## Scheduling 이란(Process Scheduling)?
- 제한된 자원들을 어떻게(순서를 할당하는 등) 나눠 줄 것인지에 대한 정책을 말합니다.

## CPU Scheduling?
- CPU 하나는 동시에 여러개의 프로세스를 처리할 수 없기 때문에, 
  한 순간에 어떤 프로세스가 CPU를 사용할 수 있게 하는지 결정하는 정책 입니다.

## CPU 스케줄링은 언제 발생하는가?
- 실행상태에서 대기상태로 전환될 때 (예, 입출력 요청) 
- Non preemptive(비선점) 실행상태에서 준비상태로 전환될 때 (예, 인터럽트 발생) 
- preemptive(선점) 대기상태에서 준비상태로 전환될 때(예, 입출력이 종료될 때) 종료될 때(Terminated)

## CPU 스케줄링의 종류를 설명하시오.
- 비선점형 : FCFS, SJF 
- 선점형 : RR, MLQ, MLFQ, SJF(SRF), RM(Rate Monotonic), EDF

- FCFS 
	- 비선점형 스케줄링이며 먼저 온 순서대로 처리합니다.

- SJF 
	- 비선점형 스케줄링이며 다른 프로세스가 먼저 도착했어도 CPU burst time이 짧은 프로세스에게 선 할당

- SRTF
	- 선점형 스케줄링이며 새로운 프로세스가 도착할 때마다 새로운 스케줄링이 이루어진다.

- Priority scheduling
	- 우선순위가 가장 높은 프로세스에게 CPU를 할당하는 스케줄링이다. 
	  우선순위란 정수로 표현하게 되고 작은 숫자가 우선순위가 높다.
	- 선점형 스케줄링(Preemptive) 방식
	  더 높은 우선순위의 프로세스가 도착하면 실행중인 프로세스를 멈추고 CPU 를 선점한다.
	- 비선점형 스케줄링(Non-Preemptive) 방식
	  더 높은 우선순위의 프로세스가 도착하면 Ready Queue 의 Head 에 넣는다.
- Round Robin (RR)
	- 할당 시간이 지나면 프로세스는 선점당하고 ready queue의 제일 뒤에 가서 다시 줄을 선다.
	- RR은 CPU 사용시간이 랜덤한 프로세스들이 섞여있을 경우에 효율적입니다.
	- RR이 가능한 이유는 프로세스의 context를 save 할 수 있기 때문입니다.

## 선점 스케줄링과 비선점 스케줄링의 차이점?
- 선점 : CPU를 할당받아 실행 중인 프로세스로부터 CPU를 선점(빼앗는 것)하여 다른 프로세스를 할당 할 수 있는 방식
- 비선점 : CPU를 할당받은 프로세스는 스스로 CPU를 반납할 때까지 CPU를 독점하여 사용

## 메모리 단편화 란 무엇인가?
- 메모리의 빈 공간 또는 자료가 여러 개의 조각으로 나뉘는 현상을 말한다. 
  할당한 메모리를 해제를 하게 되면 그 메모리 공간이 빈 공간(사용하지 않는 공간)이 되고 그 빈공간의 크기보다 큰 메모리는 사용할 수 없다. 
  그리하여 이 공간들이 하나 둘 쌓이게 되면 수치상으로는 많은 메모리 공간이 남았음에도 불구하고, 실제로 사용할 수 없는 메모리가 발생한다.

## 내부단편화와 외부단편화란?
- 내부단편화 : 페이징에서 발생하며 분할된 영역이 할당된 프로그램의 크기보다 커서 사용되지 않고 남아 있는 빈 공간을 말한다. 
- 외부단편화 : 세그먼테이션에서 발생하며, 분할된 영역이 할당될 프로그램의 크기보다 작아서 모두 빈 공간으로 남아 있는 전체 영역을 말한다. 

## 메모리 단편화 해결방법은?
- 메모리 압축(디스크 조각 모음), 메모리 통합(단편화가 발생된 공간들을 하나로 통합시켜 큰 공간으로 만드는 기법)

## 컨텍스트 스위칭(문맥교환)에 대해 설명해보세요.
- 한 Task가 끝날 때까지 기다리는 것이 아니라 여러 작업을 번갈아가며 실행해서 동시에 처리될 수 있도록 하는 방법입니다. 
  하나의 프로세스가 CPU를 사용 중인 상태에서 다른 프로세스가 CPU를 사용하도록 하기 위해 
  이전 프로세스의 상태를 보관하고 새로운 프로세스의 상태를 적재하는 작업이다. 
  즉, 스케줄링에 의해 실행 중인 코드, 자원 등을 저장하고 현재 상태를 대기 상태로 만들고, 
  다른 프로세스를 실행시키는 과정입니다.

## 커널 수준 스레드와 사용자 수준 스레드의 각각 장단점?
- 커널 수준 스레드 장점 : 다른 스레드가 입출력 작업이 다 끝날 때까지 다른 스레드를 사용해 다른 작업을 진행할 수 있다. 
             단점 : 사용자 모드에서 커널 모드로의 전환이 빈번하게 이뤄져 성능 저하가 발생합니다.
- 사용자 수준 스레드 장점 : 운영체제에서 스레드를 지원할 필요가 없다. 스케줄링 결정이나 동기화를 위해 커널을 호출하지 않았기 때문에 
                    인터럽트가 발생할 때 커널 레벨 스레드보다 오버헤드가 적다.
		       단점 :  시스템 전반에 걸친 스케줄링 우선순위를 지원하지 않습니다.   
		   
## 사용자 수준 스레드와 커널 수준 스레드 차이는?
- 코드가 실행되는 모드의 차이. 
- 커널 수준의 스레드는 커널 모드기 때문에 write()같은 함수를 사용할 수 있다. 
- 사용자 모드에서 커널 스레드를 사용하면 문맥 교환이 일어나서 오버헤드가 발생할수 있다. 
- 사용자 스레드가 여럿 있을때 하나라도 커널 모드가 되면 다른 쓰레드가 중지된다

## 모드 스위치와 프로세스 스위치 간의 차이점은?
모드 스위치 :  사용자 모드에서 커널모드로 변경할 때 발생하며 완전문맥교환이 필요하지 않고 시스템 스택을 사용합니다. 
프로세스 스위치 : 보통 문맥교환이라고 부르는 것이며 실행중인 프로세스를 멈추고 새 프로세스를 실행하는 것

## 스케줄러 종류에 대해 설명해주세요
- 장기 스케줄러
	- 메모리와 디스크 사이의 스케줄링을 담당합니다.
- 단기 스케줄러
	- CPU와 메모리 사이의 스케줄링을 담당합니다.
- 중기 스케줄러
	- CPU를 차지하기 위한 경쟁이 심해질 때 우선순위가 낮은 프로세스들을 잠시 제거한 후
	  나중에 경쟁이 완화됐을 때 다시 디스크에서 메모리로 불러와 중단되었던 부분부터 다시 실행시켜 줍니다.

## 장기 스케줄러와 단기 스케줄러의 가장 큰 차이점은??
- 실행 빈도입니다. 이유는 장기 스케줄러는 단기 스케줄러보다 호출 빈도수가 매우 적습니다.

## 임계영역(critical section)이란?
두개 이상의 쓰레드가 특정 자원을 공유하고 있을 때 한번에 하나의 쓰레드에게만 접근을 허용하고자 하는 영역을 말합니다.

## 임계 구역문제를 해결하기 위한 조건이 어떻게 될까요?
- 상호 배제(Mutual Exclusion): 한 프로세스가 임계구역에서 동작중이면 다른 프로세스는 접근할 수 없다.
- 진행(Progress): 임계구역에서 작업중인 프로세스가 없다면 입계구역으로 진입하려는 프로세스를 적절히 선택해서 진입할 수 있도록 합니다.
- 유한 대기(Bounded Waiting): 한 프로세스가 임계영역으로 진입을 요청한 후 다른 프로세스는 진입이 유한한 횟수로 제한되어야 합니다. (기아상태 방지)

## 스택을 스레드마다 독립적으로 할당하는 이유
- 스택 영역만 문맥교환이 일어나기 때문입니다. 

## PC Register 를 스레드마다 독립적으로 할당하는 이유
- 스레드는 CPU 를 할당받았다가 스케줄러에 의해 다시 선점당한다. 
  그렇기 때문에 명령어가 연속적으로 수행되지 못하고 어느 부분까지 수행했는지 기억할 필요가 있다. 
  따라서 PC 레지스터를 독립적으로 할당한다.

## 인터럽트란?
- CPU의 정상적인 프로그램 실행 을 방해했다는 의미합니다.

## 인터럽트의 종류?
- 내부 인터럽트와 외부 인터럽트 두 가지로 나뉩니다.
- 내부 인터럽트는 주로 하드웨어가 고장날 때 발생하고
- 외부 인터럽트는 입출력장치에 의해 발생됩니다.

## 인터럽트 이외에 이벤트를 처리하는 방식은?
-  인출(fetch stage)과 실행(execution stage) 두 가지 단계를 반복해서 수행합니다.
  그런데 인터럽트 요청이 들어왔다고 해서 바로 이를 처리하는 것이 아니라, 명령어 N의 실행 단계를 마쳐야 합니다. 
  명령어의 실행단계를 마칠 때마다 중앙처리장치는 반복적으로 인터럽트 요청이 있는지 계속해서 확인한다. 
  인터럽트 요청이 있어야 인터럽트 서비스 단계를 진행한다.

## 인터럽트와 트랩의 차이가 무엇인가?
- 인터럽트는 하드웨어적인 흐름의 변화이고, 트랩은 소프트웨어적이라고 할 수 있습니다. 
  트랩과 인터럽트의 주된 차이점은 트랩은 어떤 프로그램을 실행 시켰을때, 
  항상 고정된 위치에서 일어나나, 외부 인터럽트는 언제 발생될지 모른다는 점입니다.

## 시스템 콜이란?
- 응용 프로그램에서 운영체제에게 어떠한 기능(시스템 자원)을 수행해달라고 하는 하나의 수단입니다.

## 시스템 콜의 예시
- 레지스터를 통한 전송
- 블록 or 테이블을 통한 전송
- 스택을 통한 전송

## 컴파일러와 인터프리터의 차이가 무엇인가요?
- 자바 컴파일러는 .java 파일을 javac(java compiler)가 바이트코드로 쓰여진 .class 파일로 변환합니다.
- 인터프리터는 자바컴파일러에 의해 변환된 클래스파일내의 바이트코드를 특정 환경의 기계에서 실행될 수 있도록 변환합니다. 
